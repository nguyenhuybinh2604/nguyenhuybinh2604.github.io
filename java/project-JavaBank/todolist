1. Setup login system by role  -> done 30.04
a. Customer
b. Staff
c. Manager


2. User Register -> done 01.05
a. Customer
private String customerId; -> auto assigned (max CusId)
    private List<Product> products; -> blank
    private List<Request> requests; -> blank
    private List<Transaction> transactions; -> blank
    private CreditRating creditRating; -> staff assigns
    private UserRole userRole; -> auto assigned (CUSTOMER)
    private String username;-> user input, nonblank, unique
    private String password;-> user input, nonblank
    protected String personId; -> user input, nonblank, unique
    protected String name; -> user input, nonblank
    protected String sex; -> user input, nonblank
    protected int age; -> user input, nonblank
    protected String address; -> user input, nonblank
    protected String email; -> user input, nonblank, unique
b. Staff
this.staffId = staffId;
        this.userRole = userRole;-> auto assigned (STAFF)
        this.username = username;-> user input, nonblank, unique
        this.password = password;-> user input, nonblank
        this.basicSalary = basicSalary;-> manager assigns
        this.rateOfBonus = rateOfBonus;-> manager assigns
        protected String personId; -> user input, nonblank, unique
    protected String name; -> user input, nonblank
    protected String sex; -> user input, nonblank
    protected int age; -> user input, nonblank
    protected String address; -> user input, nonblank
    protected String email; -> user input, nonblank, unique
    UserStatus -> INACTIVE by default (manager approves -> change to active)
c. Manager --> system pre-sets up
private UserRole userRole;-> auto assigned (MANAGER)
    private String username;-> user input, nonblank, unique
    private String password;-> user input, nonblank
    private double basicSalary;-> auto assigned (200% x avgsalary(staff))
    private double rateOfBonus;-> auto assigned (5% bank income)


5. Sample data preparation + Input data.
loans
protected String productId; -> auto generates
    protected LocalDate valueDate;-> user input, nonblank
    protected LocalDate maturityDate;-> user input, nonblank (account -> blank)
    protected String currency;-> user input, nonblank
    protected String customerId;-> auto assigned
    protected String staffId;-> manager assigns
    protected double interestRate;
    protected double balance;-> user input
    protected double convertedBalance; -> auto assigned

02.05 done importing all products
02.05 : link all products to customers done
03.05 datainput after data import update status of products (pass maturity -> inactive)

6. Form list of products all users done, each is a link to main product list
7. Generate rates, convertedBalance, maturityDate (at product creation & loan activation!)
x. On data load -> search for ACTIVE savings + loans -> if passes maturity -> to INACTIVE
8. transactions log + requests
x. hoan thien cac phan trinh bay:
- trinh bay len console
- drawio
- slides


04.05:
1/ customerHandle personal screen: view info -> done
2/ staffhandle overview -> reformat -> done

 / why return straight to user menu??? -> done
x/ if staff got no products: -> done
x/ does new product assigned linked to staff & customers? -> done
x/ staff rating update: only customers with related products -> done
x/ data export -> done (remaining transaction -> done & messages)

-8.05: round cuoi ra lai: cac arguments ko dung den

3/ staffhandle: approve loans: log messages to customers + add check for sufficient fund + display pending requests at menu
4/ staffhandle: update rating: log message to manager
5/ transaction log:
- producthandle: addBalance, fundtransfer (x2), FX -> done
- customerhandle: edit info. !in viewinfo: display transactions; -> done
- transactionHandle: view transaction_history by: date range/ type of transaction -> done
- staffhandle: view number of transactions : overview/list of customers -> done

13.05: activities which change BS:
CUSTOMER menu:
case 2 -> {
    productHandle.addBalance(sc, inputControl, transactionHandle, users, exchangeRates, transactions, username);
                }
                +cash +balance
case 3 -> {
    productHandle.newAccount(sc, users, products, interestRates, username);
                }
                0
case 4 -> {
    productHandle.newLoan(sc, inputControl, users, products, interestRates, username);
                }
                pick disbursement account
case 5 -> {
    productHandle.newSaving(sc, inputControl, users, products, exchangeRates, interestRates, username);
                }
                +cash +saving balance
case 6 -> {
    productHandle.foreignExchange(sc, inputControl, transactionHandle, users, products, exchangeRates, transactions, username);
                }
case 7 -> {
    productHandle.fundTransfer(sc, inputControl, userHandle, transactionHandle, users, products, exchangeRates, transactions, username);
                }
STAFF menu:
case 3 -> {
     staffHandle.approveLoans(sc, inputControl, customerHandle, productHandle, users, products,
                            interestRates, exchangeRates, username);
                }
                -cash
                +loan balance
                +disbursement account balance
                +cash